// @flow
type $GetInObject = <O: Object, K>(obj: O, key: K) => $ElementType<O, K>
type $GetInArray = <Item, K: number>(arr: Item[], key: K) => Item
type $GetIn = $GetInArray&$GetInObject
declare export var getIn: $GetIn

type $GetDeepObject = <O: Object, K: Array<*>, R>(obj: O, keys: K) => R
declare export var getDeep: $GetDeepObject

type $SetInObject = <O: Object, K: $Keys<O>, V: $ElementType<O, K>>(obj: O, key: K, value: V) => O
type $SetInArray = <Item, K: number, V>(arr: Item[], key: K, value: V) => Item[]
type $SetIn = $SetInObject&$SetInArray
declare export var setIn: $SetIn

type $DeleteInObject = <O: Object, K: $Keys<O>>(obj: O, key: K) => O
type $DeleteInArray = <Item>(arr: Item[], key: number) => Item[]
type $DeleteIn = $DeleteInObject&$DeleteInArray
declare export var deleteIn: $DeleteIn

type $ShallowMergeObject = <O: Object>(a: O, b: O) => O
type $ShallowMergeArray = <Item1, Item2>(a: Item1[], b: Item2[]) => Array<Item1|Item2>
type $ShallowMerge = $ShallowMergeObject&$ShallowMergeArray
declare export var shallowMerge: $ShallowMerge

declare export function composeReturn <Args, R>(returnVal: R, fn: (...Args) => any): (...Args) => R

declare export function onCatch <Args, R>(fn: (...Args) => R, callback: (e: Error, ...Args) => void): (...Args) => R
declare export function throwIf (condition: boolean, exception: Error|() => Error): void
